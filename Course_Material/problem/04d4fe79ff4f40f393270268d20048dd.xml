<problem display_name="Exercise: int set" group_access="{&quot;51&quot;: [1, 2]}" markdown="null" weight="5.0">
  <text>
    <p>
      <b>ESTIMATED TIME TO COMPLETE: 10 minutes</b>
    </p>
    <p>Consider the following code from the last lecture video:</p>
    <pre>class intSet(object):
    """An intSet is a set of integers
    The value is represented by a list of ints, self.vals.
    Each int in the set occurs in self.vals exactly once."""

    def __init__(self):
        """Create an empty set of integers"""
        self.vals = []

    def insert(self, e):
        """Assumes e is an integer and inserts e into self""" 
        if not e in self.vals:
            self.vals.append(e)

    def member(self, e):
        """Assumes e is an integer
           Returns True if e is in self, and False otherwise"""
        return e in self.vals

    def remove(self, e):
        """Assumes e is an integer and removes e from self
           Raises ValueError if e is not in self"""
        try:
            self.vals.remove(e)
        except:
            raise ValueError(str(e) + ' not found')

    def __str__(self):
        """Returns a string representation of self"""
        self.vals.sort()
        return '{' + ','.join([str(e) for e in self.vals]) + '}'
</pre>
    <p>Your task is to define the following two methods for the <code>intSet</code> class:</p>
    <ol>
      <li>
        <p>Define an <code>intersect</code> method that returns a new 
      <code>intSet</code> containing elements that appear in both sets.  
      In other words,</p>
        <pre>s1.intersect(s2)</pre>
        <p>would return a new <code>intSet</code> of integers that appear in 
	both <code>s1</code> and <code>s2</code>. Think carefully - what
	should happen if <code>s1</code> and <code>s2</code> have no 
	elements in common?</p>
      </li>
      <li>
        <p>Add the appropriate method(s) so that <code>len(s)</code>
      returns the number of elements in <code>s</code>.</p>
        <p>Hint: look through the 
      <a href="https://docs.python.org/3.3/reference/datamodel.html" target="_blank">Python docs</a>
      to figure out what you'll need to solve this problem.</p>
      </li>
    </ol>
  </text>
  <coderesponse queuename="Watcher-MITx-6.00x">
    <textbox rows="30" cols="80" mode="python" tabsize="4"/>
    <codeparam>
      <initial_display>
class intSet(object):
    """An intSet is a set of integers
    The value is represented by a list of ints, self.vals.
    Each int in the set occurs in self.vals exactly once."""

    def __init__(self):
        """Create an empty set of integers"""
        self.vals = []

    def insert(self, e):
        """Assumes e is an integer and inserts e into self""" 
        if not e in self.vals:
            self.vals.append(e)

    def member(self, e):
        """Assumes e is an integer
           Returns True if e is in self, and False otherwise"""
        return e in self.vals

    def remove(self, e):
        """Assumes e is an integer and removes e from self
           Raises ValueError if e is not in self"""
        try:
            self.vals.remove(e)
        except:
            raise ValueError(str(e) + ' not found')

    def __str__(self):
        """Returns a string representation of self"""
        self.vals.sort()
        return '{' + ','.join([str(e) for e in self.vals]) + '}'
</initial_display>
      <answer_display>
class intSet(object):
    """An intSet is a set of integers
    The value is represented by a list of ints, self.vals.
    Each int in the set occurs in self.vals exactly once."""

    def __init__(self):
        """Create an empty set of integers"""
        self.vals = []

    def insert(self, e):
        """Assumes e is an integer and inserts e into self""" 
        if not e in self.vals:
            self.vals.append(e)

    def member(self, e):
        """Assumes e is an integer
           Returns True if e is in self, and False otherwise"""
        return e in self.vals

    def remove(self, e):
        """Assumes e is an integer and removes e from self
           Raises ValueError if e is not in self"""
        try:
            self.vals.remove(e)
        except:
            raise ValueError(str(e) + ' not found')

    def intersect(self, other):
        """Assumes other is an intSet
           Returns a new intSet containing elements that appear in both sets."""
        # Initialize a new intSet    
        commonValueSet = intSet()
        # Go through the values in this set
        for val in self.vals:
            # Check if each value is a member of the other set    
            if other.member(val):
                commonValueSet.insert(val)
        return commonValueSet

    def __str__(self):
        """Returns a string representation of self"""
        self.vals.sort()
        return '{' + ','.join([str(e) for e in self.vals]) + '}'

    def __len__(self):
        """Returns the length of the set.
           This method is called by the `len` built-in function."""
        return len(self.vals)
</answer_display>
      <grader_payload>
{"grader": "finger_exercises/L10/intSet/grade_intSet.py"}
</grader_payload>
    </codeparam>
  </coderesponse>
</problem>
