
  
ESTIMATED TIME TO COMPLETE: 6 minutes

def test_csv(expect, ans):
   # Take out all spaces in expected answer
   expect = [i.strip(' ') for i in str(expect).split(',')]
   # Take out all spaces in student solution
   ans = [i.strip(' ') for i in str(ans).split(',')]

   def strip_q(x):
      # Strip quotes around strings if students have entered them
      stripped_ans = []
      for item in x:
         if item[0] == "'" and item[-1]=="'":
            item = item.strip("'")
         elif item[0] == '"' and item[-1] == '"':
            item = item.strip('"') #" (quote to fix syntax highlighting in emacs)
         stripped_ans.append(item)
      return stripped_ans 

   return strip_q(expect) == strip_q(ans)


def any_answer(expect, ans):
   if ans == "AssertionError: Cannot divide by 0":
      return True
   elif ans == "AssertionError" or ans == "AssertionError:":
      return True
   elif ans == "Cannot divide by 0":
      return True


      Consider the function 
normalize
numbers
def normalize(numbers):
    max_number = max(numbers)
    for i in range(len(numbers)):
        numbers[i] /= float(max_number)
    return numbers  
 
normalize
try:
      normalize([0, 0, 0])
except ZeroDivisionError:
      print('Invalid maximum element')


            Does the 
try
Yes
No
           
What is the name of the exception the code is trying to catch? 
          
           
What is the output? 
          

            Since we are dividing by the maximum element in a list of positive numbers, we know that 
normalize
pre condition
post condition

            We also know the result is not meaningful when the maximum element is 0, so we want to ensure that the numbers in the list do not violate this. What type of condition is this? 
              
pre condition
post condition
 
Now assume the definition of the function 
normalize
def normalize(numbers):
    max_number = max(numbers)
    assert(max_number != 0), "Cannot divide by 0"
    for i in range(len(numbers)):
        numbers[i]  /= float(max_number)
        assert(0.0 <= numbers[i] <= 1.0), "output not between 0 and 1"
    return numbers        
        

    Answer the next 3 questions based on this code.

            Which condition does the line 
assert(max_number != 0)
pre condition
post condition

            Which condition does the line 
assert(0.0 <= numbers[i] <= 1.0)
pre condition
post condition
           
              What does the function call 
normalize([0, 0, 0])
