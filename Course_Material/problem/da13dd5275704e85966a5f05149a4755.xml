<problem display_name="Exercise 2" group_access="{&quot;51&quot;: [1, 2]}" markdown="null">
  <text>
    <p>
      <b>ESTIMATED TIME TO COMPLETE: 12 minutes</b>
    </p>
    <p>For the following programs, fill in the best-case and the worst-case
      number of steps it will take to run each program.</p>
    <p>For these questions, you'll be asked to write a mathematical expression.
      Use +, -, / signs to indicate addition, subtraction, and division. Explicitly
      indicate multiplication with a * (ie say "6*n" rather than "6n").
      Indicate exponentiation with a caret (^) (ie "n^4" for [mathjaxinline]n^4[/mathjaxinline]).
      Indicate base-2 logarithms with the word log2 followed by parenthesis (ie "log2(n)").</p>
    <ol>
      <li>
        <p>Program 1:</p>
        <pre>def program1(x):
    total = 0
    for i in range(1000):
        total += i

    while x &gt; 0:
        x -= 1
        total += x

    return total</pre>
        <p>What is the number of steps it will take to run Program 1
	in the best case? Express your answer in terms of <i>n</i>, the
	size of the input <code>x</code>.</p>
        <p>
          <formularesponse type="cs" samples="n@1:5#10" answer="3003">
            <responseparam type="tolerance" default="0.00001"/>
            <formulaequationinput size="40"/>
          </formularesponse>
        </p>
        <p>What is the number of steps it will take to run Program 1
	  in the worst case? Express your answer in terms of <i>n</i>, the
	  size of the input <code>x</code>. </p>
        <p>
          <formularesponse type="cs" samples="n@1:5#10" answer="5*n + 3003">
            <responseparam type="tolerance" default="0.00001"/>
            <formulaequationinput size="40"/>
          </formularesponse>
        </p>
        <p>
          <solution>
            <div class="detailed-solution">
              <p>
                <b>Explanation:</b>
              </p>
              <p>In the best case scenario, <code>x</code> is less than or equal to 0. We first execute
		the assignment <code>total = 0</code> for one step. Next
		we execute the <code>for i in range(1000)</code> loop. This loop is executed
		1000 times and has three steps (one for the assignment of <code>i</code> each time through 
		the loop, as well as two for the <code>+=</code> operation) on each iteration.
		We next check if <code>x &gt; 0</code> - it is not so we do not enter the loop.
		Adding one more step for the return statement, in the best case we execute 1 + 3*1000 + 1 + 1
		= 3003 steps.</p>
              <p>In the worst case scenario, <code>x</code> is a large positive number.
		In this case, we first execute the assignment <code>total = 0</code> for one step. 
		Next we execute the first loop 1000 times (3000 total steps), then we
		execute the second loop (<code>while x &gt; 0</code>) <i>n</i> times. This loop
		has five steps (one for the conditional check, <code>x &gt; 0</code>, and two each
		for the <code>-=</code> and <code>+=</code> operations). When we finally get to the point
		where <code>x = 0</code>, we execute the conditional check <code>x &gt; 0</code> one last 
		time - since it is not, we do not enter the loop. Adding one more step for 
		the return statement, in the worst case we execute 1 + 3*1000 + 5*n + 1 + 1 = 5*n + 3003 steps.</p>
            </div>
          </solution>
        </p>
      </li>
      <li>
        <p>Program 2:</p>
        <pre>def program2(x):
    total = 0
    for i in range(1000):
        total = i

    while x &gt; 0:
        x = x//2
        total += x

    return total
</pre>
        <p>What is the number of steps it will take to run Program 2
	in the best case? Express your answer in terms of <i>n</i>, the
	size of the input <code>x</code>.</p>
        <p>
          <formularesponse type="cs" samples="n@1:5#10" answer="2003">
            <responseparam type="tolerance" default="0.00001"/>
            <formulaequationinput size="40"/>
          </formularesponse>
        </p>
        <p>What is the number of steps it will take to run Program 2
	  in the worst case? Express your answer in terms of <i>n</i>, the
	  size of the input <code>x</code>. </p>
        <p>
          <formularesponse type="cs" samples="n@10:50#10" answer="5*log2(n) + 2008">
            <responseparam type="tolerance" default="5"/>
            <formulaequationinput size="40"/>
          </formularesponse>
        </p>
        <p>
          <solution>
            <div class="detailed-solution">
              <p>
                <b>Explanation:</b>
              </p>
              <p>In the best case scenario, <code>x</code> is less than or equal to 0. We first execute
		the assignment <code>total = 0</code> for one step. Next we execute the <code>for i in range(1000)</code> 
		loop. This loop is executed 1000 times and has two steps (one for the assignment of <code>i</code> each time through 
		the loop, as well as one for the <code>=</code> operation) on each iteration.
		We next check if <code>x &gt; 0</code> - it is not so we do not enter the loop.
		Adding in one step for the return statement, in the best case we execute 1 + 2*1000 + 1 + 1 = 2003 steps.</p>
              <p>In the worst case scenario, <code>x</code> is a large positive number.
		In this case we first execute the assignment <code>total = 0</code> for one step, then
		we execute the first loop 1000 times (2000 total steps). Finally
		execute the second loop (<code>while x &gt; 0</code>) <i>log2(n) + 1</i> times. <b>This is tricky!</b>
		Because we divide x by 2 every time through the loop, we only execute this loop
		a logarithmic number of times. <code>log2(n)</code> divisions of <code>x</code> by 2 will get us to
		<code>x = 1</code>; we'll need one more division to get <code>x &lt;= 0 </code>. Don't worry 
		if you couldn't get this fact;	we'll go through it a few more times in this unit.</p>
              <p>This while loop has five steps (one for the conditional check, <code>x &gt; 0</code>, and two each
                for the <code>//=</code> and <code>+=</code> operations). When we finally get to the point
		where <code>x = 0</code>, we execute the conditional check <code>x &gt; 0</code> one last 
		time - since it is not, we do not enter the loop. 
		Adding in one step for the return statement, in 
		the worst case we execute 1 + 2*1000 + 5*(log2(n) + 1) + 1 + 1 = 5*log2(n) + 2008 steps.</p>
            </div>
          </solution>
        </p>
      </li>
      <li>
        <p>Program 3:</p>
        <pre>def program3(L):
    totalSum = 0
    highestFound = None
    for x in L:
        totalSum += x

    for x in L:
        if highestFound == None:
            highestFound = x
        elif x &gt; highestFound:
            highestFound = x

    return (totalSum, highestFound)</pre>
        <p>What is the number of steps it will take to run Program 3
	in the best case? Express your answer in terms of <i>n</i>, the
	number of elements in the list <code>L</code>. </p>
        <p>
          <formularesponse type="cs" samples="n@1:5#10" answer="3">
            <responseparam type="tolerance" default="0.00001"/>
            <formulaequationinput size="40"/>
          </formularesponse>
        </p>
        <p>What is the number of steps it will take to run Program 3
	in the worst case? Express your answer in terms of <i>n</i>, the
	number of elements in the list <code>L</code>. </p>
        <p>
          <formularesponse type="cs" samples="n@1:5#10" answer="7*n + 2">
            <responseparam type="tolerance" default="0.00001"/>
            <formulaequationinput size="40"/>
          </formularesponse>
        </p>
        <p>
          <solution>
            <div class="detailed-solution">
              <p>
                <b>Explanation:</b>
              </p>
              <p>In the best case scenario, <code>L</code> is an empty list. Thus
		we execute only the first two assignment statements, then the return
		statement. Therefore in the best case we execute 3 steps. Note that since the
		list is empty, no assignments are performed in the <code>for x in L</code> lines. </p>
              <p>In the worst case scenario, <code>L</code> is a list with its elements 
		sorted in increasing order (eg, <code>[1, 3, 5, 7, ...]</code>).
		In this case we execute the first two assignment statements (2 steps). Next we
		execute the first loop <i>n</i> times. This first loop has three steps (one for 
		the assignment of <code>x</code> each time through the loop, as well as two for the 
		<code>+=</code> operation), adding 3*n steps.</p>
              <p>Finally we execute the second loop <i>n</i> times. The first time we execute 
		this loop, we perform 3 steps - one for the assignment of <code>x</code>; then
		we run the check <code>if highestFound == None</code>, and finding it to be 
		True, we execute the assignment <code>highestFound = x</code>.</p>
              <p>The next (n-1) times we execute this loop, we perform 4 steps: one for the assignment
		of <code>x</code>, then we run the check <code>if highestFound == None</code>, and finding 
		it to be False, we run the check <code>elif x &gt; highestFound</code>. Since this is always True (the list
		is sorted in <b>increasing</b> order), we execute the assignment <code>highestFound = x</code>.
		Therefore in the second loop we execute 3 + (n-1)*4 = 3 + 4*n - 4 = 4*n - 1 steps.</p>
              <p>Finally we execute the return statement, which is one more step.</p>
              <p>Pulling this all together, we can see that in the worst case we execute 
		2 + 3*n + 4*n - 1 + 1= 7*n + 2 steps.</p>
            </div>
          </solution>
        </p>
      </li>
    </ol>
    <p>Reminder: You do not lose points for trying a problem multiple times, nor 
      do you lose points if you hit "Show Answer". If this problem has you stumped after 
      you've tried it a few times, feel free to reveal the solution.</p>
    <p>Click the "Reset" button to clear your answers.</p>
  </text>
</problem>
