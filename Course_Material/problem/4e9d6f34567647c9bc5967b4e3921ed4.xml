<problem display_name="Exercise: vara varb" group_access="{&quot;51&quot;: [1, 2]}" markdown="null" weight="5.0">
  <text>
    <p>
      <b>ESTIMATED TIME TO COMPLETE: 5 minutes</b>
    </p>
    <p>
Assume that two variables, <code>varA</code> and <code>varB</code>, are assigned values, either numbers or strings. </p>
    <p>
      Write a piece of Python code that evaluates <code>varA</code> and <code>varB</code>, and then prints out one of the following messages: </p>
    <ul class="itemize">
      <li>
        <p><code>"string involved"</code> if either <code>varA</code> or <code>varB</code> are strings </p>
      </li>
      <li>
        <p><code>"bigger"</code> if <code>varA</code> is larger than <code>varB</code> </p>
      </li>
      <li>
        <p><code>"equal"</code> if <code>varA</code> is equal to <code>varB</code> </p>
      </li>
      <li>
        <p><code>"smaller"</code> if <code>varA</code> is smaller than <code>varB</code> </p>
      </li>
    </ul>
    <section class="hints">
      <div class="collapsible">
        <header>
          <a href="#" id="imp1">Do not ask for user input</a>
        </header>
        <section id="imp1">
          <p>Assume that variables are defined for you by our grader code. Simply write code assuming you know the values of the variables.</p>
        </section>
      </div>
    </section>
    <p/>
  </text>
  <coderesponse queuename="Watcher-MITx-6.00x">
    <textbox rows="10" cols="80" mode="python" tabsize="4"/>
    <codeparam>
      <initial_display/>
      <answer_display>if type(varA) == str or type(varB) == str:
    print('string involved')
elif varA &gt; varB:
    print('bigger')
elif varA == varB:
    print('equal')
else:
    # If none of the above conditions are true,
    # it must be the case that varA &lt; varB
    print('smaller')
</answer_display>
      <grader_payload>
{"grader": "finger_exercises/L2/two_vars/grade_two_vars.py"}
</grader_payload>
    </codeparam>
  </coderesponse>
  <solution>
    <p>
      <b>Explanation</b>
    </p>
    <p>Is <code>type(varA) == str or type(varB) == str</code> equivalent to <code>type(varA) or type(varB) == str</code> ? Those are not equivalent because of <a href="https://docs.python.org/3.5/reference/expressions.html#operator-precedence" target="_blank">Python precedence</a> (some operations have higher precedence than others).
        The <code>==</code> has higher precedence than the <code>or</code> so it will get evaluated first. Therefore:<br/>
        <code>type(varA) or type(varB) == str</code><br/>
        Will evaluate to the following, if we explicitly put parentheses:<br/>
        <code>type(varA) or ( type(varB) == str )</code><br/>
        <code>True or ( type(varB) == str )</code><br/>
        <code>( True )</code><br/>
      Because "anything" or "True" will just take the value of "True" (by boolean algebra).<br/>
        And the other expression:<br/>
        <code>type(varA) == str or type(varB) == str</code><br/>
        Will evaluate to the following, if we explicitly put parentheses:<br/>
        <code>( type(varA) == str ) or ( type(varB) == str )</code><br/>
So you will have to check each of the expressions in the parentheses to see whether they are true or not to determine the final result. So these two are not equal.</p>
  </solution>
  <text>
    <p><b class="bfseries">Hint:</b> Remember the <code>type</code> function? </p>
    <p><b class="bfseries">Hint:</b> Recall that if you want to check whether the type of a variable is a specific kind, you can compare the type of the variable to the type of a known object. </p>
  </text>
</problem>
