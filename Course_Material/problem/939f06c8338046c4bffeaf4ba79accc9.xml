<problem title="Dealing With Hands" attempts="30" type="lecture" display_name="Problem 2" markdown="null" max_attempts="30" showanswer="never">
  <style media="all" type="text/css"/>
  <text>
    <p><b><span style="color: #ff0000;">**Please read this problem
      entirely!!**</span></b>
      The majority of this problem consists of learning how to read
      code, which is an incredibly useful and important skill. At the 
      end, you will implement a short function. Be sure to take your 
      time on this problem - it may seem easy, but reading someone 
      else's code can be challenging and this is an important exercise.
    </p>
    <br/>
    <h2>Representing hands</h2>
    <p>A <b>hand</b> is the set of letters held by a player during the
  game. The player is initially dealt a set of random
  letters. For example, the player could start out with the
  following hand: <strong><code>a, q, l, m, u, i,
  l</code></strong>. In our program, a hand will be represented
  as a dictionary: the keys are (lowercase) letters and the
  values are the number of times the particular letter is
  repeated in that hand. For example, the above hand would be
  represented as:</p>
    <pre>hand = {'a':1, 'q':1, 'l':2, 'm':1, 'u':1, 'i':1}    </pre>
    <p>Notice how the repeated letter <code>'l'</code> is
  represented. Remember that with a dictionary,
  the usual way to access a value is <code>hand['a']</code>,
  where <code>'a'</code> is the key we want to find. However,
  this only works if the key is in the dictionary; otherwise,
  we get a <code>KeyError</code>. To avoid this, we can use the
  call <code>hand.get('a',0)</code>. This is the
  "safe" way to access a value if we are not sure
  the key is in the dictionary. <code>d.get(key,default)</code>
  returns the value for <code>key</code> if <code>key</code> is in
  the dictionary <code>d</code>, else <code>default</code>. If
  <code>default</code> is not given, it returns <code>None</code>, so
  that this method never raises a
  <code>KeyError</code>. For example:</p>
    <pre>&gt;&gt;&gt; hand['e']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'e'
&gt;&gt;&gt; hand.get('e', 0)
0</pre>
    <h2>Converting words into dictionary representation</h2>
    <p>One useful function we've defined for you is
  <code>getFrequencyDict</code>, defined near the top of
  <code>ps4a.py</code>. When given a string of letters as an
  input, it returns a dictionary where the keys are letters
  and the values are the number of times that letter is
  represented in the input string. For example:</p>
    <pre>&gt;&gt;&gt; getFrequencyDict("hello")
{'h': 1, 'e': 1, 'l': 2, 'o': 1}</pre>
    <p>As you can see, this is the same kind of dictionary we
  use to represent hands.</p>
    <h2>Displaying a hand</h2>
    <p>Given a hand represented as a dictionary, we want to
  display it in a user-friendly way. We have provided the
  implementation for this in the <code>displayHand</code>
  function. Take a few minutes right now to read through this
  function carefully and understand what it does and how it
  works.</p>
    <h2>Generating a random hand</h2>
    <p>The hand a player is dealt is a set of letters chosen at
  random. We provide you with the implementation of a
  function that generates this random hand,
  <code>dealHand</code>. The function takes as input a positive
  integer <code>n</code>, and returns a new object, a hand containing 
  <code>n</code> lowercase letters. Again, take a few minutes (right now!)
  to read through this function carefully and understand what
  it does and how it works.</p>
    <h2>Removing letters from a hand (you implement this)</h2>
    <p>The player starts with a hand, a set of letters. As the
  player spells out words, letters from this set are used up.
  For example, the player could start out with the following
  hand: <strong><code>a, q, l, m, u, i, l</code></strong>. The
  player could choose to spell the word
  <strong><code>quail</code></strong> . This would leave the
  following letters in the player's hand:
  <strong><code>l, m</code></strong>. Your task is to implement the
  function <code>updateHand</code>, which takes in two inputs - a
  <code>hand</code> and a <code>word</code> (string). <code>updateHand</code>
  uses letters from the hand to spell the word, and then returns a 
  copy of the <code>hand</code>, containing only the letters remaining. 
  For example:</p>
    <pre>&gt;&gt;&gt; hand = {'a':1, 'q':1, 'l':2, 'm':1, 'u':1, 'i':1}
&gt;&gt;&gt; displayHand(hand) # Implemented for you
a q l l m u i
&gt;&gt;&gt; hand = updateHand(hand, 'quail') # You implement this function!
&gt;&gt;&gt; hand
{'a':0, 'q':0, 'l':1, 'm':1, 'u':0, 'i':0}
&gt;&gt;&gt; displayHand(hand)
l m  </pre>
    <p>Implement the <code>updateHand</code> function. Make sure
      this function has no side effects: i.e., it must not mutate
      the hand passed in. Before pasting your function definition here, 
      be sure you've passed the appropriate tests in <code>test_ps4a.py</code>.</p>
    <section class="hints">
      <h3>Hints</h3>
      <div class="collapsible">
        <header>
          <a href="#" id="ht2">Testing</a>
        </header>
        <section id="ht2">
          <p><strong>Testing:</strong> Make sure the <code>test_updateHand()</code> tests 
      pass. You will also want to test your implementation of <code>updateHand</code> with
      some reasonable inputs.</p>
        </section>
      </div>
      <div class="collapsible">
        <header>
          <a href="#" id="ht1">Copying Dictionaries</a>
        </header>
        <section id="ht1">
          <p>You may wish to review the ".copy" method of Python dictionaries (review this and
      other Python dictionary methods <a href="http://docs.python.org/library/stdtypes.html#mapping-types-dict" target="_blank">
	here</a>). </p>
        </section>
      </div>
    </section>
    <br/>
    <p>Your implementation of updateHand should be short (ours is 4 lines of code). It does not need to call
  any helper functions.</p>
  </text>
  <coderesponse queuename="Watcher-MITx-6.00x">
    <textbox rows="30" cols="70" mode="python" tabsize="4"/>
    <codeparam>
      <initial_display>
def updateHand(hand, word):
    """
    Assumes that 'hand' has all the letters in word.
    In other words, this assumes that however many times
    a letter appears in 'word', 'hand' has at least as
    many of that letter in it. 

    Updates the hand: uses up the letters in the given word
    and returns the new hand, without those letters in it.

    Has no side effects: does not modify hand.

    word: string
    hand: dictionary (string -&gt; int)    
    returns: dictionary (string -&gt; int)
    """
    # TO DO ... &lt;-- Remove this comment when you code this function
</initial_display>
      <grader_payload>
{"grader": "ps04/updateHand/grade_updateHand.py"}
</grader_payload>
    </codeparam>
  </coderesponse>
</problem>
