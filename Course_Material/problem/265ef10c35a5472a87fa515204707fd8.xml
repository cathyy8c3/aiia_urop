<problem title="Hangman, Part 1a" attempts="30" type="lecture" display_name="Problem 1" markdown="null" max_attempts="30" showanswer="never">
  <text>
    <p>Please read the Hangman Introduction before starting this problem. We'll start by writing 3 simple functions that will help us easily code the Hangman problem.
      First, implement the function <code>isWordGuessed</code>  that takes in two parameters - a string,
      <code>secretWord</code>, and a list of letters, <code>lettersGuessed</code>. This function returns a 
      boolean - <code>True</code> if <code>secretWord</code> has been guessed (ie, all the letters of <code>secretWord</code> 
      are in <code>lettersGuessed</code>) and <code>False</code> otherwise.</p>
    <p>Example Usage:</p>
    <pre>&gt;&gt;&gt; secretWord = 'apple' 
&gt;&gt;&gt; lettersGuessed = ['e', 'i', 'k', 'p', 'r', 's']
&gt;&gt;&gt; print(isWordGuessed(secretWord, lettersGuessed))
False</pre>
    <p>For this function, you may assume that all the letters in <code>secretWord</code> and
  <code>lettersGuessed</code> are lowercase.</p>
  </text>
  <coderesponse queuename="Watcher-MITx-6.00x">
    <textbox rows="30" cols="70" mode="python" tabsize="4"/>
    <codeparam>
      <initial_display>
def isWordGuessed(secretWord, lettersGuessed):
    '''
    secretWord: string, the word the user is guessing
    lettersGuessed: list, what letters have been guessed so far
    returns: boolean, True if all the letters of secretWord are in lettersGuessed;
      False otherwise
    '''
    # FILL IN YOUR CODE HERE...
</initial_display>
      <grader_payload>
{"grader": "ps03/hangman1a/grade_isWordGuessed.py"}
</grader_payload>
    </codeparam>
  </coderesponse>
</problem>
