<problem display_name="Exercise 1" group_access="{&quot;51&quot;: [1, 2]}" markdown="null">
  <text>
    <p>
      <b>ESTIMATED TIME TO COMPLETE: 12 minutes</b>
      <br/>
      <b>Note that you will have to answer all questions before you can click the Check button.</b>
    </p>
    <p>
      <b class="bfseries">Part 1: Function Types</b>
    </p>
    <p>
For each of the following functions, specify the type of its <b class="bfseries">return</b>. You can assume each function is called with an appropriate argument, as specified by its docstring. </p>
    <p>
If the output can be either an int or a float, select num, which isn't a real Python type, but which we'll use to indicate that either basic numeric type is legal. </p>
    <p>
In fact, in Python, booleans True and False can be operated on as if they were the integers 1 and 0; but it is ugly and confusing to take advantage of this fact, and we will resolutely pretend that it isn't true. </p>
    <p>
      <section class="hints">
        <div class="collapsible">
          <header>
            <a href="#" id="id41">What are those lines under the function definitions?</a>
          </header>
          <section id="id41">
            <p>
In this and future problems, you'll see function definitions that look like this: </p>
            <pre>
def a(x):
   '''
   x: int or float.
   '''
   return x + 1
</pre>
            <p>
What are those three lines between <code>def a(x):</code> and <code>return x + 1</code>? These lines are called the <i class="it">docstring</i> of the function. A docstring is a special type of comment that is used to document what your function is doing. Typically, docstrings will explain what the function expects the type(s) of the argument(s) to be, and what the function is returning. </p>
            <p>
In Python, docstrings appear immediately after the <code>def</code> line of a function, before the body. Docstrings start and end with triple quotes - this can be triple single quotes or triple double quotes, it doesn't matter as long as they match. To sum up this general form: </p>
            <pre>
def my_function(argument):
   """
   Docstring goes here. Explain what type argument(s) should have, and what your function
   is going to return.
   """
   &lt; Code for your function (the body of the function) goes here &gt;
</pre>
            <p>
As you begin coding your own functions, we strongly encourage you to document all your functions by using properly-formatted docstrings! </p>
          </section>
        </div>
      </section>
    </p>
    <ol class="enumerate">
      <li>
        <pre>
def a(x):
   '''
   x: int or float.
   '''
   return x + 1
 </pre>
        <p>
 Indicate the type of the output that the function <code>a</code> will yield. <optionresponse><optioninput options="('NoneType','num','int','float','boolean')" correct="num"/></optionresponse> </p>
      </li>
      <li>
        <pre>
def b(x):
   '''
   x: int or float.
   '''
   return x + 1.0
 </pre>
        <p>
 Indicate the type of the output that the function <code>b</code> will yield. <optionresponse><optioninput options="('NoneType','num','int','float','boolean')" correct="float"/></optionresponse> </p>
      </li>
      <li>
        <pre>
def c(x, y):
   '''
   x: int or float. 
   y: int or float.
   '''
   return x + y
 </pre>
        <p>
 Indicate the type of the output that the function <code>c</code> will yield. <optionresponse><optioninput options="('NoneType','num','int','float','boolean')" correct="num"/></optionresponse> </p>
      </li>
      <li>
        <pre>
def d(x, y):
   '''
   x: Can be int or float.
   y: Can be int or float.
   '''
   return x &gt; y
 </pre>
        <p>
 Indicate the type of the output that the function <code>d</code> will yield. <optionresponse><optioninput options="('NoneType','num','int','float','boolean')" correct="boolean"/></optionresponse> </p>
      </li>
      <li>
        <pre>
def e(x, y, z):
   '''
   x: Can be int or float.
   y: Can be int or float.
   z: Can be int or float.
   '''
   return x &gt;= y and x &lt;= z
 </pre>
        <p>
 Indicate the type of the output that the function <code>e</code> will yield. <optionresponse><optioninput options="('NoneType','num','int','float','boolean')" correct="boolean"/></optionresponse> </p>
      </li>
      <li>
        <pre>
def f(x, y):
   '''
   x: int or float.
   y: int or float
   '''
   x + y - 2
 </pre>
        <p>
 Indicate the type of the output that the function <code>f</code> will yield. <optionresponse><optioninput options="('NoneType','num','int','float','boolean')" correct="NoneType"/></optionresponse> </p>
      </li>
    </ol>
    <solution><p><b>Explanation:</b></p>
      The last function, unlike the other ones, does not have a return statement. It only does an operation (the operation is <code>x+y-2</code>). Since it does not explicitly return anything, Python by default returns the value <code>None</code> whose type is <code>NoneType</code>.
So this function and any other that does not have a return statement can be rewritten as:
<pre>def f(x, y):
   x + y - 2
   return None
      </pre>
    </solution>
  </text>
</problem>
