<problem title="Word Scores" attempts="30" type="lecture" display_name="Problem 1" markdown="null" max_attempts="30" showanswer="never">
  <style media="all" type="text/css"/>
  <text>
    <p>The first step is to implement some code that allows us
        to calculate the score for a single word. The function
        <code>getWordScore</code> should accept as input a string of 
        lowercase letters (a <em>word</em>) and return the integer
        score for that word, using the game's scoring rules. </p>
    <section class="hints">
      <div class="collapsible">
        <header>
          <a href="#" id="ht1l">A Reminder of the Scoring Rules</a>
        </header>
        <section id="ht1">
          <dt>
            <strong>Scoring</strong>
          </dt>
          <dd>
            <ul>
              <li>
                <p>The score for the hand is the sum of the scores
            for each word formed.</p>
              </li>
              <li>
                <p>The score for a word is the sum of the points
            for letters in the word, multiplied by the length
            of the word, plus 50 points if all <em>n</em>
            letters are used on the first word created.</p>
              </li>
              <li>
                <p>Letters are scored as in Scrabble; A is worth 1,
            B is worth 3, C is worth 3, D is worth 2, E is
            worth 1, and so on. We have defined the dictionary
            <code>SCRABBLE_LETTER_VALUES</code> that maps each
            lowercase letter to its Scrabble letter value.</p>
              </li>
              <li>
                <p>For example, 'weed' would be worth
            32 points ((4+1+1+2) for the four letters, then multiply by <code>len('weed')</code> 
            to get (4+1+1+2)*4 = 32). Be sure to check that the hand
            actually has 1 'w', 2 'e's,
            and 1 'd' before scoring the word!</p>
              </li>
              <li>
                <p>As another example, if <em>n</em>=7 and you make the word
            'waybill' on the first try, it would be
            worth 155 points (the base score for 'waybill' is
            (4+1+4+3+1+1+1)*7=105, plus an additional 50 point
            bonus for using all <em>n</em> letters).</p>
              </li>
            </ul>
          </dd>
        </section>
      </div>
    </section>
    <br/>
    <h2>Hints</h2>
    <ul>
      <li>You may assume that the input <code>word</code> is always
	either a string of lowercase letters, or the empty string
	<code>""</code>. </li>
      <li>You will want to use the
	<code>SCRABBLE_LETTER_VALUES</code> dictionary defined at the
	top of <code>ps4a.py</code>. You should not change its value.</li>
      <li> Do <strong>not</strong> assume that there are always 7
	letters in a hand! The parameter <code>n</code> is the number
	of letters required for a bonus score (the maximum number
	of letters in the hand). Our goal is to keep the code
	modular - if you want to try playing your word game with
	<em>n=10</em> or <em>n=4</em>, you will be able to do it by
	simply changing the value of <code>HAND_SIZE</code>!</li>
      <li><strong>Testing:</strong> If this function is implemented
	properly, and you run <code>test_ps4a.py</code>, you should see
	that the <code>test_getWordScore()</code> tests pass. Also
	test your implementation of <code>getWordScore</code>, using
	some reasonable English words.</li>
    </ul>
    <p>Fill in the code for <code>getWordScore</code> in <code>ps4a.py</code> and be sure you've 
      passed the appropriate tests in <code>test_ps4a.py</code> before pasting your function 
      definition here.</p>
  </text>
  <coderesponse queuename="Watcher-MITx-6.00x">
    <textbox rows="30" cols="70" mode="python" tabsize="4"/>
    <codeparam>
      <initial_display>
def getWordScore(word, n):
    """
    Returns the score for a word. Assumes the word is a valid word.

    The score for a word is the sum of the points for letters in the
    word, multiplied by the length of the word, PLUS 50 points if all n
    letters are used on the first turn.

    Letters are scored as in Scrabble; A is worth 1, B is worth 3, C is
    worth 3, D is worth 2, E is worth 1, and so on (see SCRABBLE_LETTER_VALUES)

    word: string (lowercase letters)
    n: integer (HAND_SIZE; i.e., hand size required for additional points)
    returns: int &gt;= 0
    """
    # TO DO ... &lt;-- Remove this comment when you code this function
</initial_display>
      <grader_payload>
{"grader": "ps04/wordScore/grade_wordScore.py"}
</grader_payload>
    </codeparam>
  </coderesponse>
</problem>
