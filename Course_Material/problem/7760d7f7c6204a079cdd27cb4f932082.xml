<problem title="Hangman, Part 2" attempts="30" type="lecture" display_name="Problem 4" markdown="null" max_attempts="30" showanswer="never">
  <text>
    <p>Now you will implement the function <code>hangman</code>, which takes one
      parameter - the <code>secretWord</code> the user is to guess. This starts up an 
      interactive game of Hangman between the user and the computer. Be sure you 
      take advantage of the three helper functions, <code>isWordGuessed</code>, 
      <code>getGuessedWord</code>, and <code>getAvailableLetters</code>,
      that you've defined in the previous part.</p>
    <h4>Hints:</h4>
    <ul>
      <li>
        <p>You should start by noticing where we're using the provided functions (at the 
	  top of <code>ps3_hangman.py</code>) to load the words and pick a random one. Note that the 
	  functions <code>loadWords</code> and <code>chooseWord</code> should only be used on your local
	  machine, not in the tutor. When you enter in your solution in the tutor, you only need to 
	  give your <code>hangman</code> function.</p>
      </li>
      <li>
        <p>Consider using <code>lower()</code> to convert user input to lower case. For example:</p>
        <pre>guess = 'A'
guessInLowerCase = guess.lower()</pre>
      </li>
      <li>
        <p>Consider writing additional helper functions if you need
	  them!</p>
      </li>
      <li>
        <p>There are four important pieces of information you
	  may wish to store:</p>
        <ol>
          <li><code>secretWord</code>: The word to guess.</li>
          <li><code>lettersGuessed</code>: The letters that have been guessed so
	    far.</li>
          <li><code>mistakesMade</code>: The number of incorrect guesses made so
	    far.</li>
          <li><code>availableLetters</code>: The letters that may still be guessed. Every 
	    time a player guesses a letter, the guessed letter must be 
	    removed from <code>availableLetters</code> (and if they guess a letter that
	    is not in <code>availableLetters</code>, you should print a message
	    telling them they've already guessed that - so try again!).</li>
        </ol>
      </li>
    </ul>
    <section class="hints">
      <h3>Sample Output</h3>
      <div class="collapsible">
        <header>
          <a href="#" id="ht1l">The output 
      of a winning game should look like this...</a>
        </header>
        <section id="ht1">
          <pre>
	Loading word list from file...
	55900 words loaded.
	Welcome to the game, Hangman!
	I am thinking of a word that is 4 letters long.
	-------------
	You have 8 guesses left.
	Available letters: abcdefghijklmnopqrstuvwxyz
	Please guess a letter: a
	Good guess: _ a_ _
	------------
	You have 8 guesses left.
	Available letters: bcdefghijklmnopqrstuvwxyz
	Please guess a letter: a
	Oops! You've already guessed that letter: _ a_ _
	------------
	You have 8 guesses left.
	Available letters: bcdefghijklmnopqrstuvwxyz
	Please guess a letter: s
	Oops! That letter is not in my word: _ a_ _
	------------
	You have 7 guesses left.
	Available letters: bcdefghijklmnopqrtuvwxyz
	Please guess a letter: t
	Good guess: ta_ t
	------------
	You have 7 guesses left.
	Available letters: bcdefghijklmnopqruvwxyz
	Please guess a letter: r
	Oops! That letter is not in my word: ta_ t
	------------
	You have 6 guesses left.
	Available letters: bcdefghijklmnopquvwxyz
	Please guess a letter: m
	Oops! That letter is not in my word: ta_ t
	------------
	You have 5 guesses left.
	Available letters: bcdefghijklnopquvwxyz
	Please guess a letter: c
	Good guess: tact
	------------
	Congratulations, you won!
          </pre>
        </section>
      </div>
      <div class="collapsible">
        <header>
          <a href="#" id="ht2l">And the output of a losing game should look like this...</a>
        </header>
        <section id="ht2">
          <pre>
	Loading word list from file...
	55900 words loaded.
	Welcome to the game Hangman!
	I am thinking of a word that is 4 letters long.
	-----------
	You have 8 guesses left.
	Available Letters: abcdefghijklmnopqrstuvwxyz
	Please guess a letter: a
	Oops! That letter is not in my word: _ _ _ _
	-----------
	You have 7 guesses left.
	Available Letters: bcdefghijklmnopqrstuvwxyz
	Please guess a letter: b
	Oops! That letter is not in my word: _ _ _ _
	-----------
	You have 6 guesses left.
	Available Letters: cdefghijklmnopqrstuvwxyz
	Please guess a letter: c
	Oops! That letter is not in my word: _ _ _ _
	-----------
	You have 5 guesses left.
	Available Letters: defghijklmnopqrstuvwxyz
	Please guess a letter: d
	Oops! That letter is not in my word: _ _ _ _
	-----------
	You have 4 guesses left.
	Available Letters: efghijklmnopqrstuvwxyz
	Please guess a letter: e
	Good guess: e_ _ e
	-----------
	You have 4 guesses left.
	Available Letters: fghijklmnopqrstuvwxyz
	Please guess a letter: f
	Oops! That letter is not in my word: e_ _ e
	-----------
	You have 3 guesses left.
	Available Letters: ghijklmnopqrstuvwxyz
	Please guess a letter: g
	Oops! That letter is not in my word: e_ _ e
	-----------
	You have 2 guesses left.
	Available Letters: hijklmnopqrstuvwxyz
	Please guess a letter: h
	Oops! That letter is not in my word: e_ _ e
	-----------
	You have 1 guesses left.
	Available Letters: ijklmnopqrstuvwxyz
	Please guess a letter: i
	Oops! That letter is not in my word: e_ _ e
	-----------
	Sorry, you ran out of guesses. The word was else. 
          </pre>
        </section>
      </div>
    </section>
    <br/>
    <p>Note that if you choose to use the helper functions <code>isWordGuessed</code>, <code>getGuessedWord</code>,
      or <code>getAvailableLetters</code>, you do not need to paste your definitions in the box. We have supplied
      our implementations of these functions for your use in this part of the problem. If you use additional 
      helper functions, you will need to paste those definitions here. </p>
    <p>Your function should include calls to <code>input</code> to get the user's guess. </p>
    <section class="hints">
      <div class="collapsible">
        <header>
          <a href="#" id="id71">Why does my Output Have <code>None</code> at Various Places?</a>
        </header>
        <section id="id71">
          <p><code>None</code> is a keyword and it comes from the fact that you are printing the result of a function that does not return anything. For example:
<pre>
    def foo(x):
        print(x)
              </pre>
              If you just call the function with  <code>foo(3)</code>, you will see output:
<pre>
    3   #-- because the function printed the variable
            </pre>
              
              However, if you do <code>print(foo(3))</code>, you will see output:
<pre>
    3     #-- because the function printed the variable
    None  #-- because you printed the function (and hence the return)
              </pre>

All functions return something. If a function you write does not return anything (and just prints something to the console), then the default action in Python is to <code>return None</code></p>
        </section>
      </div>
    </section>
  </text>
  <coderesponse queuename="Watcher-MITx-6.00x">
    <textbox rows="40" cols="70" mode="python" tabsize="4"/>
    <codeparam>
      <initial_display>
def hangman(secretWord):
    '''
    secretWord: string, the secret word to guess.

    Starts up an interactive game of Hangman.

    * At the start of the game, let the user know how many 
      letters the secretWord contains.

    * Ask the user to supply one guess (i.e. letter) per round.

    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computers word.

    * After each round, you should also display to the user the 
      partially guessed word so far, as well as letters that the 
      user has not yet guessed.

    Follows the other limitations detailed in the problem write-up.
    '''
    # FILL IN YOUR CODE HERE...
</initial_display>
      <grader_payload>
{"grader": "ps03/hangman_game/simple_grade_hangman.py"}
</grader_payload>
    </codeparam>
  </coderesponse>
</problem>
