
  

    

      
ESTIMATED TIME TO COMPLETE: 12 minutes
Python supports a limited form of multiple inheritance,
      demonstrated in the following code:
class A(object):
    def __init__(self):
        self.a = 1
    def x(self):
        print("A.x")
    def y(self):
        print("A.y")
    def z(self):
        print("A.z")

class B(A):
    def __init__(self):
        A.__init__(self)
        self.a = 2
        self.b = 3
    def y(self):
        print("B.y")
    def z(self):
        print("B.z")

class C(object):
    def __init__(self):
        self.a = 4
        self.c = 5
    def y(self):
        print("C.y")
    def z(self):
        print("C.z")

class D(C, B):
    def __init__(self):
        C.__init__(self)
        B.__init__(self)
        self.d = 6
    def z(self):
        print("D.z")
Which 
__init__
__init__
When resolving a reference to an attribute of an object that's an
  instance of class 
D
C
B
A
With the definitions above if we define
obj = D()
then what is printed by each of the following statements?

      

        
print(obj.a)

          

            

        
print(obj.b)

          

            

        
print(obj.c)

          

            

        
print(obj.d)

          

            

        
obj.x()

          

            

        
obj.y()

          

            

        
obj.z()

          

            
