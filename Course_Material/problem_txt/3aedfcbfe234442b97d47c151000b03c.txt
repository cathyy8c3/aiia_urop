
  

    
ESTIMATED TIME TO COMPLETE: 6 minutes

    
The greatest common divisor of two positive integers is the largest integer that divides 
      each of them without remainder. For example, 

      

        
gcd(2, 12) = 2 

        
gcd(6, 12) = 6 

        
gcd(9, 12) = 3 

        
gcd(17, 12) = 1 
A clever mathematical trick (due to Euclid) makes it easy to find greatest common divisors. 
      Suppose that 
a
b

      

        
If b = 0, then the answer is a 

        
Otherwise, gcd(a, b) is the same as gcd(b, a % b) 

      
See this website for an example of Euclid's algorithm being used to find the gcd.
Write a function 
gcdRecur(a, b)

    

      

def gcdRecur(a, b):
    '''
    a, b: positive integers
    
    returns: a positive integer, the greatest common divisor of a & b.
    '''
    # Your code here


def gcdRecur(a, b):
    '''
    a, b: positive integers
    
    returns: a positive integer, the greatest common divisor of a & b.
    '''
    # Base case is when b = 0
    if b == 0:
        return a

    # Recursive case
    return gcdRecur(b, a % b)


{"grader": "finger_exercises/L5/gcdRecur/grade_gcdRecur.py"}


    
Note: In programming there are many ways to solve a problem. For your code to check correctly 
  here, though, you must write your recursive function such that you make a recursive call 
  directly to the function 
gcdRecur
If you are getting the error stating that "Your code should be recursive" when you already make a call to 
gcdRecur
