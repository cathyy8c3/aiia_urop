<problem title="Problem 3: Using Bisection Search to Make the Program Faster" attempts="30" type="lecture" display_name="Problem 3" markdown="null" max_attempts="30" showanswer="never">
  <text>
    <p>You'll notice that
      in Problem 2, your monthly payment had to be a multiple of
      $10. Why did we make it that way? You can
      try running your code locally so that the payment can be any dollar
      and cent amount (in other words, the monthly payment is a
      multiple of $0.01). Does your code still work? It should, but
      you may notice that your code runs more slowly, especially in
      cases with very large balances and interest rates. (Note: when
      your code is running on our servers, there are limits
      on the amount of computing time each submission is allowed, 
      so your observations from running this experiment on the grading 
      system might be limited to an error message 
      complaining about too much time taken.)</p>
    <p> Well then, how can we calculate a more accurate fixed monthly payment than we did
    in Problem 2 without running into the problem of slow code? We can make this
    program run faster using a technique introduced in lecture - bisection search!</p>
    <p>The following variables contain values as described below:</p>
    <ol>
      <li>
        <p><code>balance</code> - the outstanding balance on the credit card</p>
      </li>
      <li>
        <p><code>annualInterestRate</code> - annual interest rate as a decimal</p>
      </li>
    </ol>
    <p> To recap the problem: we are searching for
      the smallest monthly payment such that we can pay off the
      entire balance within a year. What is a reasonable <b>lower bound</b> for this payment
      value? $0 is the obvious anwer, but you can do better than that. If
      there was no interest, the debt can be paid off by monthly
      payments of one-twelfth of the original balance, so we must
      pay at least this much every month. One-twelfth of the original balance
      is a good lower bound.</p>
    <p>What is a good <b>upper
      bound</b>? Imagine that instead of paying monthly, we paid off
      the entire balance at the end of the year. What we ultimately
      pay must be greater than what we would've paid in monthly
      installments, because the interest was compounded on the
      balance we didn't pay off each month. So a good upper bound for the monthly payment
      would be one-twelfth of the balance, <i>after</i> having its
      interest compounded monthly for an entire year.</p>
    <p>In short:</p>
    <blockquote>
      <p><strong>Monthly interest rate</strong>
	= (Annual interest rate) / 12.0<br/>

	<strong>Monthly payment lower bound</strong>
	= Balance / 12<br/>

	<strong>Monthly payment upper bound</strong> = (Balance x
        (1 + Monthly interest rate)<sup>12</sup>) / 12.0
</p>
    </blockquote>
    <p>Write a program that uses these bounds and bisection
        search (for more info check out <a href="http://en.wikipedia.org/wiki/Bisection_method" target="_blank">the Wikipedia page
        on bisection search</a>)
        to find the smallest monthly payment <em>to the cent</em>
        (no more multiples of $10) such that we can pay off the
        debt within a year. Try it out with large inputs, and
        notice how fast it is (try the same large inputs in your solution to
	Problem 2 to compare!). Produce the same return value
        as you did in Problem 2.</p>
    <p>Note that if you do not use bisection search, your code will not run - your code only has
      30 seconds to run on our servers.</p>
    <section class="hints">
      <p><b>Test Cases to Test Your Code With.</b> Be sure to test these on your own machine - 
	and that you get the same output! - before running your code on this webpage!</p>
      <div class="collapsible">
        <header>
          <a href="#" id="ht3l">Click to See Problem 3 Test Cases  </a>
        </header>
        <section id="ht3">
          <p><b>Note:</b> The automated tests are leinient - if your answers are off by a few cents 
    in either direction, your code is OK. </p>
          <p>Be sure to test these on your own machine - 
	and that you get the same output! - before running your code on this webpage!</p>
          <p>Test Cases:</p>
          <ol>
            <li>
              <p>
                <pre>
                  <code>
	      Test Case 1:
	      balance = 320000
	      annualInterestRate = 0.2

	      Result Your Code Should Generate:
	      -------------------
	      Lowest Payment: 29157.09
      </code>
                </pre>
              </p>
            </li>
            <li>
              <p>
                <pre>
                  <code>
	      Test Case 2:
	      balance = 999999
	      annualInterestRate = 0.18
	      
	      Result Your Code Should Generate:
	      -------------------
	      Lowest Payment: 90325.03
	  </code>
                </pre>
              </p>
            </li>
          </ol>
        </section>
      </div>
    </section>
    <br/>
  </text>
  <coderesponse queuename="Watcher-MITx-6.00x">
    <textbox rows="30" cols="70" mode="python" tabsize="4"/>
    <codeparam>
      <initial_display>
# Paste your code into this box
</initial_display>
      <answer_display/>
      <grader_payload>
{"grader": "ps02/bisect/grade_bisect.py"}
</grader_payload>
    </codeparam>
  </coderesponse>
  <text>
    <b>Note:</b>
    <p>Depending on where, and how frequently, you round during
    this function, your answers may be off a few cents in
    either direction. Try rounding as few times as possible
    in order to increase the accuracy of your result. </p>
    <br/>
    <section class="hints">
      <h3>Important</h3>
      <div class="collapsible">
        <header>
          <a href="#" id="imp1">Only hit "Check" once per submission. You only get 30 checks per problem.</a>
        </header>
        <section id="imp1">
          <p>** Our automatic grader may take a few minutes to respond with feedback. If you hit "Check" 
	multiple times, you will lose a check for every press of the button.</p>
          <p>** If you're unfamiliar with how our autograder works, first try out one of the infinite check problems
	in the Functions lecture sequence.</p>
          <p>** Please be judicious with your checks, as we are unable to give you more than 30 checks. However 
	this should be more than sufficient: if you do your code development in your local environment, and ensure you
	can pass our test cases, you should not require more than a few checks once you paste your working,
	tested code into our code box.</p>
        </section>
      </div>
      <div class="collapsible">
        <header>
          <a href="#" id="ht1">If you believe you have correct code but it is marked incorrect after clicking "Check"...</a>
        </header>
        <section id="ht1">
          <p>** After you submit your code, you can see every test case the graders runs on your code. They compare what your code outputs with what our answer code is supposed to output. Click the small link titled "See Full Output" below the Test Results header.</p>
        </section>
      </div>
      <div class="collapsible">
        <header>
          <a href="#" id="ht1">"Staff Debug: L397 Error" means your code has an infinite loop...</a>
        </header>
        <section id="ht1">
          <p>** Clicking Check may give you the error:<br/>
            <code>There was a problem running your solution (Staff debug: L379).</code> <code>We couldn't run your solution (Staff debug: L397).</code>. <br/>This means your code is taking too long or has an infinite loop. Test your code with more unique test cases, such as very large or very small values.
</p>
        </section>
      </div>
      <div class="collapsible">
        <header>
          <a href="#" id="ht1">Do not define your own values</a>
        </header>
        <section id="ht1">
          <p>** For problems such as these, do not include <code>input</code> statements or define variables we told you would be given. Our automated testing will provide values for you - so write your code in the following box assuming those variables are already defined. The code you paste into the following box <b>should not</b> 
      specify the values for the variables <code>balance</code> 
      or <code>annualInterestRate</code> </p>
        </section>
      </div>
    </section>
  </text>
</problem>
