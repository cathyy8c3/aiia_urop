<problem title="Computer Chooses a Word" attempts="30" type="lecture" display_name="Problem 7 - Computer Chooses a Word" markdown="null" max_attempts="30" showanswer="never" weight="15.0">
  <text>
    <h3>
      <span style="color: red;">**Part B is dependent on your
        functions from <code>ps4a.py</code>, so be sure to complete
        <code>ps4a.py</code> before working on
        <code>ps4b.py</code>**</span>
    </h3>
    <br/>
    <p>Now that you have completed your word game code, you decide that
      you would like to enable your computer (SkyNet) to play the game 
      (your hidden agenda is to prove once and for all
      that computers are inferior to human intellect!) In Part B
      you will make a modification to the <code>playHand</code>
      function from part A that will enable this to happen. The idea
      is that you will be able to compare how you as a user succeed in the game
      compared to the computer's performance.</p>
    <p>It is your responsibility to create the function
        <code>compChooseWord(hand, wordList, n)</code>. Pseudocode
	is provided in the file <code>ps4b.py</code>.</p>
    <p>If you follow the pseudocode,
      you'll create a computer player that is legal, but not
      always the best. Once you've implemented it following our approach,
      feel free to try your own approach! As much as we'd love to give you
      credit for making an improved <code>compChooseWord</code> function,
      we hope you can understand our automatic grading facilities are limited
      in their ability to accept differing solutions. </p>
    <section class="hints">
      <h3>Hints and Sample Output</h3>
      <div class="collapsible">
        <header>
          <a href="#" id="ht1">A Note On Runtime</a>
        </header>
        <section id="ht1">
          <p>You may notice that things run a bit slowly when the
      computer plays. This is to be expected - the <code>wordList</code>
      has 83667 words, after all!</p>
          <p>However, don't worry about this issue when running
    your code in the checker below! We load a very small sample wordList 
    (<i>much</i> smaller than 83667 words!) to avoid having your code 
    time out.</p>
        </section>
      </div>
      <div class="collapsible">
        <header>
          <a href="#" id="ht2">Test Cases</a>
        </header>
        <section id="ht2">
          <p>Some test cases to look at:</p>
          <pre>&gt;&gt;&gt; compChooseWord({'a': 1, 'p': 2, 's': 1, 'e': 1, 'l': 1}, wordList, 6)
appels
&gt;&gt;&gt; compChooseWord({'a': 2, 'c': 1, 'b': 1, 't': 1}, wordList, 5)
acta
&gt;&gt;&gt; compChooseWord({'a': 2, 'e': 2, 'i': 2, 'm': 2, 'n': 2, 't': 2}, wordList, 12)
immanent
&gt;&gt;&gt; compChooseWord({'x': 2, 'z': 2, 'q': 2, 'n': 2, 't': 2}, wordList, 12)
None</pre>
          <p>For the first test case your code might also find <code>apples</code>, depending on
  how you code your solution. This is okay and will check as correct.</p>
        </section>
      </div>
    </section>
    <br/>
  </text>
  <coderesponse queuename="Watcher-MITx-6.00x">
    <textbox rows="30" cols="70" mode="python" tabsize="4"/>
    <codeparam>
      <initial_display>
def compChooseWord(hand, wordList, n):
    """
    Given a hand and a wordList, find the word that gives 
    the maximum value score, and return it.

    This word should be calculated by considering all the words
    in the wordList.

    If no words in the wordList can be made from the hand, return None.

    hand: dictionary (string -&gt; int)
    wordList: list (string)
    returns: string or None
    """
    # BEGIN PSEUDOCODE (available within ps4b.py)
</initial_display>
      <grader_payload>
{"grader": "ps04/compChooseWord/grade_compChooseWord.py"}
</grader_payload>
    </codeparam>
  </coderesponse>
</problem>
