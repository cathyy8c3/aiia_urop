
  

    
You'll notice that
      in Problem 2, your monthly payment had to be a multiple of
      $10. Why did we make it that way? You can
      try running your code locally so that the payment can be any dollar
      and cent amount (in other words, the monthly payment is a
      multiple of $0.01). Does your code still work? It should, but
      you may notice that your code runs more slowly, especially in
      cases with very large balances and interest rates. (Note: when
      your code is running on our servers, there are limits
      on the amount of computing time each submission is allowed, 
      so your observations from running this experiment on the grading 
      system might be limited to an error message 
      complaining about too much time taken.)
 Well then, how can we calculate a more accurate fixed monthly payment than we did
    in Problem 2 without running into the problem of slow code? We can make this
    program run faster using a technique introduced in lecture - bisection search!
The following variables contain values as described below:

      

        
balance

        
annualInterestRate
 To recap the problem: we are searching for
      the smallest monthly payment such that we can pay off the
      entire balance within a year. What is a reasonable 
lower bound
What is a good 
upper
      bound
after
In short:

      
Monthly interest rate
Monthly payment lower bound
Monthly payment upper bound
12
Write a program that uses these bounds and bisection
        search (for more info check out 
the Wikipedia page
        on bisection search
to the cent
Note that if you do not use bisection search, your code will not run - your code only has
      30 seconds to run on our servers.

      
Test Cases to Test Your Code With.

        

          
Click to See Problem 3 Test Cases  

          
Note:
Be sure to test these on your own machine - 
	and that you get the same output! - before running your code on this webpage!
Test Cases:

            

              

                

                  

	      Test Case 1:
	      balance = 320000
	      annualInterestRate = 0.2

	      Result Your Code Should Generate:
	      -------------------
	      Lowest Payment: 29157.09
      

              

                

                  

	      Test Case 2:
	      balance = 999999
	      annualInterestRate = 0.18
	      
	      Result Your Code Should Generate:
	      -------------------
	      Lowest Payment: 90325.03
	  

    

      

# Paste your code into this box


{"grader": "ps02/bisect/grade_bisect.py"}


    
Note:
Depending on where, and how frequently, you round during
    this function, your answers may be off a few cents in
    either direction. Try rounding as few times as possible
    in order to increase the accuracy of your result. 

      
Important

        

          
Only hit "Check" once per submission. You only get 30 checks per problem.

          
** Our automatic grader may take a few minutes to respond with feedback. If you hit "Check" 
	multiple times, you will lose a check for every press of the button.
** If you're unfamiliar with how our autograder works, first try out one of the infinite check problems
	in the Functions lecture sequence.
** Please be judicious with your checks, as we are unable to give you more than 30 checks. However 
	this should be more than sufficient: if you do your code development in your local environment, and ensure you
	can pass our test cases, you should not require more than a few checks once you paste your working,
	tested code into our code box.

        

          
If you believe you have correct code but it is marked incorrect after clicking "Check"...

          
** After you submit your code, you can see every test case the graders runs on your code. They compare what your code outputs with what our answer code is supposed to output. Click the small link titled "See Full Output" below the Test Results header.

        

          
"Staff Debug: L397 Error" means your code has an infinite loop...

          
** Clicking Check may give you the error:
There was a problem running your solution (Staff debug: L379).
We couldn't run your solution (Staff debug: L397).

        

          
Do not define your own values

          
** For problems such as these, do not include 
input
should not
balance
annualInterestRate
