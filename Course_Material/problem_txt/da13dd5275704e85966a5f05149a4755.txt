
  

    

      
ESTIMATED TIME TO COMPLETE: 12 minutes
For the following programs, fill in the best-case and the worst-case
      number of steps it will take to run each program.
For these questions, you'll be asked to write a mathematical expression.
      Use +, -, / signs to indicate addition, subtraction, and division. Explicitly
      indicate multiplication with a * (ie say "6*n" rather than "6n").
      Indicate exponentiation with a caret (^) (ie "n^4" for [mathjaxinline]n^4[/mathjaxinline]).
      Indicate base-2 logarithms with the word log2 followed by parenthesis (ie "log2(n)").

      

        
Program 1:
def program1(x):
    total = 0
    for i in range(1000):
        total += i

    while x > 0:
        x -= 1
        total += x

    return total
What is the number of steps it will take to run Program 1
	in the best case? Express your answer in terms of 
n
x

          

            
What is the number of steps it will take to run Program 1
	  in the worst case? Express your answer in terms of 
n
x

          

            

          

            

              

                
Explanation:
In the best case scenario, 
x
total = 0
for i in range(1000)
i
+=
x > 0
In the worst case scenario, 
x
total = 0
while x > 0
n
x > 0
-=
+=
x = 0
x > 0

        
Program 2:
def program2(x):
    total = 0
    for i in range(1000):
        total = i

    while x > 0:
        x = x//2
        total += x

    return total

What is the number of steps it will take to run Program 2
	in the best case? Express your answer in terms of 
n
x

          

            
What is the number of steps it will take to run Program 2
	  in the worst case? Express your answer in terms of 
n
x

          

            

          

            

              

                
Explanation:
In the best case scenario, 
x
total = 0
for i in range(1000)
i
=
x > 0
In the worst case scenario, 
x
total = 0
while x > 0
log2(n) + 1
This is tricky!
log2(n)
x
x = 1
x <= 0 
This while loop has five steps (one for the conditional check, 
x > 0
//=
+=
x = 0
x > 0

        
Program 3:
def program3(L):
    totalSum = 0
    highestFound = None
    for x in L:
        totalSum += x

    for x in L:
        if highestFound == None:
            highestFound = x
        elif x > highestFound:
            highestFound = x

    return (totalSum, highestFound)
What is the number of steps it will take to run Program 3
	in the best case? Express your answer in terms of 
n
L

          

            
What is the number of steps it will take to run Program 3
	in the worst case? Express your answer in terms of 
n
L

          

            

          

            

              

                
Explanation:
In the best case scenario, 
L
for x in L
In the worst case scenario, 
L
[1, 3, 5, 7, ...]
n
x
+=
Finally we execute the second loop 
n
x
if highestFound == None
highestFound = x
The next (n-1) times we execute this loop, we perform 4 steps: one for the assignment
		of 
x
if highestFound == None
elif x > highestFound
increasing
highestFound = x
Finally we execute the return statement, which is one more step.
Pulling this all together, we can see that in the worst case we execute 
		2 + 3*n + 4*n - 1 + 1= 7*n + 2 steps.
Reminder: You do not lose points for trying a problem multiple times, nor 
      do you lose points if you hit "Show Answer". If this problem has you stumped after 
      you've tried it a few times, feel free to reveal the solution.
Click the "Reset" button to clear your answers.
