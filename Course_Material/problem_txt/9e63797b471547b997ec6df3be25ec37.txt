
  

    
Now you will implement the function 
hangman
secretWord
isWordGuessed
getGuessedWord
getAvailableLetters
Hints:

      

        
You should start by noticing where we're using the provided functions (at the 
	  top of 
ps3_hangman.py
loadWords
chooseWord
hangman

        
Consider using 
lower()
guess = 'A'
guessInLowerCase = guess.lower()

        
Consider writing additional helper functions if you need
	  them!

        
There are four important pieces of information you
	  may wish to store:

          
secretWord
lettersGuessed
mistakesMade
availableLetters
availableLetters
availableLetters

      
Sample Output

        

          
The output 
      of a winning game should look like this...

          

	Loading word list from file...
	55900 words loaded.
	Welcome to the game, Hangman!
	I am thinking of a word that is 4 letters long.
	-------------
	You have 8 guesses left.
	Available letters: abcdefghijklmnopqrstuvwxyz
	Please guess a letter: a
	Good guess: _ a_ _
	------------
	You have 8 guesses left.
	Available letters: bcdefghijklmnopqrstuvwxyz
	Please guess a letter: a
	Oops! You've already guessed that letter: _ a_ _
	------------
	You have 8 guesses left.
	Available letters: bcdefghijklmnopqrstuvwxyz
	Please guess a letter: s
	Oops! That letter is not in my word: _ a_ _
	------------
	You have 7 guesses left.
	Available letters: bcdefghijklmnopqrtuvwxyz
	Please guess a letter: t
	Good guess: ta_ t
	------------
	You have 7 guesses left.
	Available letters: bcdefghijklmnopqruvwxyz
	Please guess a letter: r
	Oops! That letter is not in my word: ta_ t
	------------
	You have 6 guesses left.
	Available letters: bcdefghijklmnopquvwxyz
	Please guess a letter: m
	Oops! That letter is not in my word: ta_ t
	------------
	You have 5 guesses left.
	Available letters: bcdefghijklnopquvwxyz
	Please guess a letter: c
	Good guess: tact
	------------
	Congratulations, you won!
          

        

          
And the output of a losing game should look like this...

          

	Loading word list from file...
	55900 words loaded.
	Welcome to the game Hangman!
	I am thinking of a word that is 4 letters long.
	-----------
	You have 8 guesses left.
	Available Letters: abcdefghijklmnopqrstuvwxyz
	Please guess a letter: a
	Oops! That letter is not in my word: _ _ _ _
	-----------
	You have 7 guesses left.
	Available Letters: bcdefghijklmnopqrstuvwxyz
	Please guess a letter: b
	Oops! That letter is not in my word: _ _ _ _
	-----------
	You have 6 guesses left.
	Available Letters: cdefghijklmnopqrstuvwxyz
	Please guess a letter: c
	Oops! That letter is not in my word: _ _ _ _
	-----------
	You have 5 guesses left.
	Available Letters: defghijklmnopqrstuvwxyz
	Please guess a letter: d
	Oops! That letter is not in my word: _ _ _ _
	-----------
	You have 4 guesses left.
	Available Letters: efghijklmnopqrstuvwxyz
	Please guess a letter: e
	Good guess: e_ _ e
	-----------
	You have 4 guesses left.
	Available Letters: fghijklmnopqrstuvwxyz
	Please guess a letter: f
	Oops! That letter is not in my word: e_ _ e
	-----------
	You have 3 guesses left.
	Available Letters: ghijklmnopqrstuvwxyz
	Please guess a letter: g
	Oops! That letter is not in my word: e_ _ e
	-----------
	You have 2 guesses left.
	Available Letters: hijklmnopqrstuvwxyz
	Please guess a letter: h
	Oops! That letter is not in my word: e_ _ e
	-----------
	You have 1 guesses left.
	Available Letters: ijklmnopqrstuvwxyz
	Please guess a letter: i
	Oops! That letter is not in my word: e_ _ e
	-----------
	Sorry, you ran out of guesses. The word was else. 
          
Note that if you choose to use the helper functions 
isWordGuessed
getGuessedWord
getAvailableLetters
Your function should include calls to 
input

      

        

          
Why does my Output Have 
None

          
None

    def foo(x):
        print x
              
foo(3)

    3   #-- because the function printed the variable
            
print foo(3)

    3     #-- because the function printed the variable
    None  #-- because you printed the function (and hence the return)
              
return None

    

      

def hangman(secretWord):
    '''
    secretWord: string, the secret word to guess.

    Starts up an interactive game of Hangman.

    * At the start of the game, let the user know how many 
      letters the secretWord contains.

    * Ask the user to supply one guess (i.e. letter) per round.

    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computers word.

    * After each round, you should also display to the user the 
      partially guessed word so far, as well as letters that the 
      user has not yet guessed.

    Follows the other limitations detailed in the problem write-up.
    '''
    # FILL IN YOUR CODE HERE...


{"grader": "ps03/hangman_game/simple_grade_hangman_test.py"}

