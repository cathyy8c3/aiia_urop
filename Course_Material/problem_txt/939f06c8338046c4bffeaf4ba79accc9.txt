
  

    
**Please read this problem
      entirely!!**
Representing hands
A 
hand
a, q, l, m, u, i,
  l
hand = {'a':1, 'q':1, 'l':2, 'm':1, 'u':1, 'i':1}    
Notice how the repeated letter 
'l'
hand['a']
'a'
KeyError
hand.get('a',0)
d.get(key,default)
key
key
d
default
default
None
KeyError
>>> hand['e']
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 'e'
>>> hand.get('e', 0)
0
Converting words into dictionary representation
One useful function we've defined for you is
  
getFrequencyDict
ps4a.py
>>> getFrequencyDict("hello")
{'h': 1, 'e': 1, 'l': 2, 'o': 1}
As you can see, this is the same kind of dictionary we
  use to represent hands.
Displaying a hand
Given a hand represented as a dictionary, we want to
  display it in a user-friendly way. We have provided the
  implementation for this in the 
displayHand
Generating a random hand
The hand a player is dealt is a set of letters chosen at
  random. We provide you with the implementation of a
  function that generates this random hand,
  
dealHand
n
n
Removing letters from a hand (you implement this)
The player starts with a hand, a set of letters. As the
  player spells out words, letters from this set are used up.
  For example, the player could start out with the following
  hand: 
a, q, l, m, u, i, l
quail
l, m
updateHand
hand
word
updateHand
hand
>>> hand = {'a':1, 'q':1, 'l':2, 'm':1, 'u':1, 'i':1}
>>> displayHand(hand) # Implemented for you
a q l l m u i
>>> hand = updateHand(hand, 'quail') # You implement this function!
>>> hand
{'a':0, 'q':0, 'l':1, 'm':1, 'u':0, 'i':0}
>>> displayHand(hand)
l m  
Implement the 
updateHand
test_ps4a.py

      
Hints

        

          
Testing

          
Testing:
test_updateHand()
updateHand

        

          
Copying Dictionaries

          
You may wish to review the ".copy" method of Python dictionaries (review this and
      other Python dictionary methods 

	here
Your implementation of updateHand should be short (ours is 4 lines of code). It does not need to call
  any helper functions.

    

      

def updateHand(hand, word):
    """
    Assumes that 'hand' has all the letters in word.
    In other words, this assumes that however many times
    a letter appears in 'word', 'hand' has at least as
    many of that letter in it. 

    Updates the hand: uses up the letters in the given word
    and returns the new hand, without those letters in it.

    Has no side effects: does not modify hand.

    word: string
    hand: dictionary (string -> int)    
    returns: dictionary (string -> int)
    """
    # TO DO ... <-- Remove this comment when you code this function


{"grader": "ps04/updateHand/grade_updateHand.py"}

