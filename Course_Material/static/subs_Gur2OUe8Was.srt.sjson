{
  "start": [
    0, 
    810, 
    4320, 
    6370, 
    10770, 
    13120, 
    15347, 
    16680, 
    18097, 
    18930, 
    21760, 
    23950, 
    25080, 
    27540, 
    29050, 
    30669, 
    32210, 
    34710, 
    38480, 
    40630, 
    42277, 
    43610, 
    45010, 
    47240, 
    50140, 
    53310, 
    58620, 
    61690, 
    63690, 
    66380, 
    68730, 
    71550, 
    74450, 
    76170, 
    79270, 
    81330, 
    84090, 
    87384, 
    90050, 
    91960, 
    93960, 
    96750, 
    99750, 
    101100, 
    103640, 
    105260, 
    109530, 
    111450, 
    115140, 
    116640, 
    119020, 
    122170, 
    124950, 
    125460, 
    126410, 
    127517, 
    128600, 
    130399, 
    132190, 
    134720, 
    137410, 
    140980, 
    146140, 
    149469, 
    151010, 
    154835, 
    156960, 
    158280, 
    161370, 
    162760, 
    165340, 
    168000, 
    169310, 
    172480, 
    176760, 
    180320, 
    182200, 
    184820, 
    186800, 
    189430, 
    191610, 
    193210, 
    196040, 
    197270, 
    201390, 
    202400, 
    204160, 
    206510, 
    208310, 
    209980, 
    211470, 
    214226, 
    216690, 
    218170, 
    220350, 
    224210, 
    227590, 
    230260, 
    232470, 
    234375, 
    235750, 
    236880, 
    238390, 
    240161, 
    241660, 
    243830, 
    245010, 
    248600, 
    252060, 
    254460, 
    255520, 
    259790, 
    263290, 
    266720, 
    270590, 
    272350, 
    274310, 
    276940, 
    280850, 
    284260, 
    286340, 
    288720, 
    292040, 
    293910, 
    295850, 
    299070, 
    300790, 
    304460, 
    306440, 
    309150, 
    310315, 
    312190, 
    315100, 
    318680, 
    322160, 
    324130, 
    325817, 
    327400, 
    328900, 
    331510, 
    333710, 
    336280, 
    339040, 
    341110, 
    345300, 
    348620, 
    350920, 
    353690, 
    357160, 
    360460, 
    362530, 
    364720, 
    368520, 
    369980, 
    372530, 
    375160, 
    379950, 
    381420, 
    383799, 
    385340, 
    387360, 
    389690, 
    394000, 
    396420, 
    399220, 
    401110, 
    403890, 
    405420, 
    408470, 
    410280, 
    412030, 
    413650, 
    417665, 
    419040, 
    421206, 
    422330, 
    423820, 
    425070, 
    428620, 
    432040, 
    435110, 
    436420, 
    439130, 
    440740, 
    442287, 
    443620, 
    445430, 
    448820, 
    450680, 
    453440, 
    456190, 
    459910, 
    462690, 
    465980, 
    468780, 
    470890, 
    471980, 
    474920, 
    476380, 
    479250, 
    482130, 
    484620
  ], 
  "end": [
    810, 
    4320, 
    6370, 
    10770, 
    13120, 
    15347, 
    16680, 
    18097, 
    18930, 
    21760, 
    23950, 
    25080, 
    27540, 
    29050, 
    30669, 
    32210, 
    34710, 
    38480, 
    40630, 
    42277, 
    43610, 
    45010, 
    47240, 
    50140, 
    53310, 
    58620, 
    61690, 
    63690, 
    66380, 
    68730, 
    71550, 
    74450, 
    76170, 
    79270, 
    81330, 
    84090, 
    87384, 
    90050, 
    91960, 
    93960, 
    96750, 
    99750, 
    101100, 
    103640, 
    105260, 
    109530, 
    111450, 
    115140, 
    116640, 
    119020, 
    122170, 
    124950, 
    125460, 
    126410, 
    127517, 
    128600, 
    130399, 
    132190, 
    134720, 
    137410, 
    140980, 
    146140, 
    149469, 
    151010, 
    154835, 
    156960, 
    158280, 
    161370, 
    162760, 
    165340, 
    168000, 
    169310, 
    172480, 
    176760, 
    180320, 
    182200, 
    184820, 
    186800, 
    189430, 
    191610, 
    193210, 
    196040, 
    197270, 
    201390, 
    202400, 
    204160, 
    206510, 
    208310, 
    209980, 
    211470, 
    214226, 
    216690, 
    218170, 
    220350, 
    224210, 
    227590, 
    230260, 
    232470, 
    234375, 
    235750, 
    236880, 
    238390, 
    240161, 
    241660, 
    243830, 
    245010, 
    248600, 
    252060, 
    254460, 
    255520, 
    259790, 
    263290, 
    266720, 
    270590, 
    272350, 
    274310, 
    276940, 
    280850, 
    284260, 
    286340, 
    288720, 
    292040, 
    293910, 
    295850, 
    299070, 
    300790, 
    304460, 
    306440, 
    309150, 
    310315, 
    312190, 
    315100, 
    318680, 
    322160, 
    324130, 
    325817, 
    327400, 
    328900, 
    331510, 
    333710, 
    336280, 
    339040, 
    341110, 
    345300, 
    348620, 
    350920, 
    353690, 
    357160, 
    360460, 
    362530, 
    364720, 
    368520, 
    369980, 
    372530, 
    375160, 
    379950, 
    381420, 
    383799, 
    385340, 
    387360, 
    389690, 
    394000, 
    396420, 
    399220, 
    401110, 
    403890, 
    405420, 
    408470, 
    410280, 
    412030, 
    413650, 
    417665, 
    419040, 
    421206, 
    422330, 
    423820, 
    425070, 
    428620, 
    432040, 
    435110, 
    436420, 
    439130, 
    440740, 
    442287, 
    443620, 
    445430, 
    448820, 
    450680, 
    453440, 
    456190, 
    459910, 
    462690, 
    465980, 
    468780, 
    470890, 
    471980, 
    474920, 
    476380, 
    479250, 
    482130, 
    484620, 
    486800
  ], 
  "text": [
    "...", 
    "So let's wrap up this lecture by looking at a few more examples", 
    "just to see, again, those common patterns that", 
    "are characteristic of particular classes of complexity.", 
    "The first one might look a little tricky.", 
    "You've actually seen a version of this earlier.", 
    "I've got a little function here.", 
    "I'm just calling it h of n.", 
    "And what's it doing?", 
    "It's assuming that n is an integer greater than 0.", 
    "And basically, it's adding up the digits", 
    "of a number together.", 
    "So it's going to take every-- sorry.", 
    "It's going to take that value of n.", 
    "It's going to turn it into a string.", 
    "And for each character in the string,", 
    "it's going to walk down, convert that character back", 
    "into an added into answer, and then return answer.", 
    "It's a slightly brain damaged, or if you prefer,", 
    "computationally challenged algorithm.", 
    "There are lots of ways to do it.", 
    "But what I want you to see is how", 
    "we would do the analysis here.", 
    "I've got n as my input.", 
    "And I want to say what's the complexity of this.", 
    "We know that this is going to be linear in the length of s.", 
    "But what is it in terms of the input m?", 
    "And in fact, that's if you like the tricky part.", 
    "And it's similar to what we saw as an earlier example.", 
    "I'm converting an integer to a string.", 
    "I'm then iterating over the length of the string.", 
    "But that's not the magnitude of the input in.", 
    "Think of it like that early example", 
    "dividing n by 10 on each iteration.", 
    "And so while it is linear in the order", 
    "of the length of the string, it's", 
    "log in the size of the input n.", 
    "And the base here doesn't matter whether it's base 10 or base 2.", 
    "It's simply logarithmic.", 
    "My point is it's important to think about", 
    "what am I using to measure the size of the problem", 
    "and then how do I characterize the complexity of the algorithm", 
    "in terms of that size.", 
    "And this is characteristic of a log algorithm.", 
    "I'm reducing the size of the problem", 
    "by a constant factor on each stage.", 
    "Let's look at another example.", 
    "Fibonacci And I want to show you both iterative and recursive", 
    "Fibonacci.", 
    "Now, I remind you Fibonacci, the nth Fibonacci number", 
    "was the sum of the previous two Fibonacci numbers.", 
    "And the first two cases are 1n is equal to 0.", 
    "It's 0.", 
    "1n is equal to 1.", 
    "It's 1.", 
    "You can see the code here.", 
    "What I want you to simply notice is", 
    "how I would look at the complexity of this.", 
    "I've got the two base cases.", 
    "And then I'm going to set up two variables.", 
    "And I'm iteratively going to run from I up to the range of n", 
    "minus 1 of temporarily holding one value right here", 
    "and then simply creating the next Fibonacci number by adding", 
    "the two previous values while holding", 
    "onto the values for the next iteration through the loop.", 
    "You can convince yourself this does the right thing", 
    "for Fibonacci.", 
    "What I want to know is what's the complexity.", 
    "We know that's constant.", 
    "Order 1, I only do it once.", 
    "We know that that's constant because I simply set it up", 
    "in the else clause.", 
    "What I want to look at is inside of the loop.", 
    "And there I've got basically an assignment, an assignment,", 
    "an addition, an assignment, four operations.", 
    "And how many times do I do that?", 
    "However many times go I go through the loop, which", 
    "is order n because of range.", 
    "I'm going to do this, actually, n minus 2 times.", 
    "But that's the same as doing order n times.", 
    "And then I return it.", 
    "So that's-- and that last return, of course, is constant.", 
    "So this is nice.", 
    "This is a linear time algorithm to compute Fibonacci.", 
    "Cool.", 
    "Actually, the best case is order 1.", 
    "But the worst case is order 1 plus order n", 
    "plus order 1, which we know is order n.", 
    "It's linear.", 
    "OK.", 
    "A more elegant way, in some sense to compute this", 
    "is what we did initially, which is to compute Fibonacci", 
    "recursively.", 
    "And there we see a different kind of characteristic", 
    "because while I've got some base cases,", 
    "the recursive call is actually two calls.", 
    "I compute Fib on n minus 1.", 
    "I compute Fib on n minus 2.", 
    "And then I add them together.", 
    "And I'm going to give you a hint.", 
    "We already looked at this earlier", 
    "and saw when we had dictionaries we", 
    "could make this more efficient.", 
    "And the reason we want to do it that", 
    "is because what do we have now?", 
    "Ah, yes.", 
    "We've got a case where as a reduction to the problem", 
    "I've got two recursive calls to the function.", 
    "And we know that should be characteristic of exponential.", 
    "And it is.", 
    "Because it says, basically, if I want to solve Fib of n,", 
    "I've got to do that by solving two versions of Fib", 
    "of m minus 1, which is going to have to be solved by four", 
    "versions of a Fib of n minus 2, which has got to be solved by 8", 
    "versions of Fib of n minus 3.", 
    "And you can see the characteristic here.", 
    "I've got to gain that sequence of 2 to the 0 plus 2", 
    "to the 1 plus 2 squared all the way up to 2 to the n.", 
    "And that overall sums up to being an exponential or 2", 
    "to the n problem.", 
    "Interestingly, as we saw earlier,", 
    "if I use dictionaries to remember earlier computation", 
    "so I didn't have to recall them, I", 
    "can reduce this back to the efficiency", 
    "of the factorial version while preserving the elegance", 
    "of the recursive call.", 
    "But as it is here, recursively this is exponential.", 
    "Iteratively it was linear.", 
    "So same problem, different algorithms,", 
    "different complexity.", 
    "And that's part of what you want to recognize", 
    "is, can I find a solution that's lower complexity", 
    "and still gives me the answer I want.", 
    "One last example, when the input's a list,", 
    "I have to think about how do I measure that.", 
    "And we've already seen examples of this.", 
    "This is simply one where I'm adding up", 
    "the elements in the list.", 
    "The issue here is that I have to define what", 
    "the size of the input means.", 
    "Many other cases, it was the magnitude of the number.", 
    "Here, the obvious one is simply the length of the list.", 
    "And because there's just that one loop there,", 
    "this is going to be linear in the size of the list.", 
    "So a big O is a really valuable tool.", 
    "It compares efficiency of algorithms.", 
    "And we use it to describe the growth asymptotically", 
    "as the algorithm takes on bigger and bigger-sized problems.", 
    "I want as low an order growth as I can to do that estimate.", 
    "And I wanted it to be independent of the machine", 
    "or the specific implementation.", 
    "So big O lets us describe that growth asymptotically", 
    "in the worst case.", 
    "And you've now seen the classes of algorithms", 
    "that fall into that category.", 
    "One last example is to look at lists and dictionaries.", 
    "Because as we've seen, both of them", 
    "come with a set of built-in operations.", 
    "And you might want to know, so what's", 
    "the complexity of those operations.", 
    "And here's simply a list of them.", 
    "For many of the list operations, indexing to get an element out,", 
    "storing it a spot, getting the length,", 
    "adding something to the end, they're all constant", 
    "because the implementation in Python", 
    "is such that we know exactly how to get to that spot", 
    "and do something.", 
    "On the other hand, other operations", 
    "are the two things equal.", 
    "If I remove an element from the list,", 
    "if I want to make a copy of the list,", 
    "and so on, you can see somewhat naturally or linear.", 
    "If I want to remove an element, I", 
    "have to walk down the list until I find it because I", 
    "don't know where it is.", 
    "If I want to copy a list, I clearly", 
    "have to look at every element.", 
    "So these are clearly linear in the size of the problem.", 
    "Dictionaries have slightly different behavior.", 
    "Notice here that index is linear.", 
    "And that makes sense.", 
    "If the list-- it was ordered, so I knew exactly where", 
    "to go to get to an element.", 
    "But here with the dictionary, we said", 
    "it could be stored in any order.", 
    "It gives me more power, but it has", 
    "a cost, which is that it is linear compared", 
    "to a list, which was constant.", 
    "Same thing with store, same thing with length,", 
    "same thing with delete, which is the equivalent to remove--", 
    "they're all linear in the cost.", 
    "On the average case, they may be much more efficient.", 
    "Indexing actually is going to be constant on average.", 
    "But remember, we're worried about the worst case.", 
    "And so what you see here is I get more power", 
    "with a dictionary.", 
    "But it comes with a cost in terms of the complexity", 
    "of the algorithm.", 
    "But you now have, I hope, a really good sense", 
    "of the different complexity classes of algorithms", 
    "and the characteristics that are associated", 
    "with each of those classes."
  ]
}