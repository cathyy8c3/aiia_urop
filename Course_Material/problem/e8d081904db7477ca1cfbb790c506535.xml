<problem display_name="Exercise: simple divide" group_access="{&quot;51&quot;: [1, 2]}" markdown="null" weight="5.0">
  <text>
    <p>
      <b>ESTIMATED TIME TO COMPLETE: 4 minutes</b>
    </p>
    <p>Suppose we rewrite the FancyDivide function to use a helper function.</p>
    <pre>def fancy_divide(list_of_numbers, index):
   denom = list_of_numbers[index]
   return [simple_divide(item, denom) for item in list_of_numbers]


def simple_divide(item, denom):
   return item / denom
    </pre>
    <br/>
    <p> This code raises a ZeroDivisionError exception for the following call:
      <code>fancy_divide([0, 2, 4], 0)</code></p>
    <p>Your task is to change the definition of <code>simple_divide</code> so that the call does not raise an exception. When dividing by 0, <code>fancy_divide</code> should return a list with all 0 elements. Any other error cases should still raise exceptions. You should only handle the ZeroDivisionError. </p>
  </text>
  <coderesponse queuename="Watcher-MITx-6.00x">
    <textbox rows="30" cols="80" mode="python" tabsize="4"/>
    <codeparam>
      <initial_display>
#define the simple_divide function here
      </initial_display>
      <answer_display>
        
# still takes same arguments
def simple_divide(item, denom):
   # start a try-except block
   try:
      return item / denom
   # catch a division by zero and return 0
   except ZeroDivisionError:
      return 0
</answer_display>
      <grader_payload>
{"grader": "finger_exercises/L8/simple_divide/grade_simple_divide.py"}
</grader_payload>
    </codeparam>
  </coderesponse>
</problem>
