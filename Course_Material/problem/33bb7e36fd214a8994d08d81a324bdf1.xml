<problem display_name="Problem 3" markdown="null" showanswer="never">
  <p>Assume <code>s</code> is a string of lower case characters.</p>
  <p>Write a program that prints the longest substring of <code>s</code> in which the letters occur in alphabetical order. For example, if <code>s = 'azcbobobegghakl'</code>, then your program should print</p>
  <p>
    <pre>Longest substring in alphabetical order is: beggh</pre>
  </p>
  <p>In the case of ties, print the first substring.  For example, if <code>s = 'abcbcd'</code>, then your program should print</p>
  <p>
    <pre>Longest substring in alphabetical order is: abc</pre>
  </p>
  <p>Note: This problem may be challenging. We encourage you to work smart. If you've spent more than a few hours on this problem, we suggest that you move on to a different part of the course. If you have time, come back to this problem after you've had a break and cleared your head.</p>
  <coderesponse queuename="Watcher-MITx-6.00x">
    <textbox rows="30" cols="80" mode="python" tabsize="4"/>
    <codeparam>
      <initial_display># Paste your code into this box </initial_display>
      <answer_display>
curString = s[0]
longest = s[0]
for i in range(1, len(s)):
    if s[i] &gt;= curString[-1]:
        curString += s[i]
        if len(curString) &gt; len(longest):
            longest = curString
    else:
        curString = s[i]
print 'Longest substring in alphabetical order is:', longest
</answer_display>
      <grader_payload>
{"grader": "chips1/alphasubs/grade_alphasubs.py"}
</grader_payload>
    </codeparam>
  </coderesponse>
  <text>
    <section class="hints">
      <h3>Important</h3>
      <div class="collapsible">
        <header>
          <a href="#" id="imp1">Only hit "Check" once per submission. You only get 30 checks per problem.</a>
        </header>
        <section id="imp1">
          <p>** Our automatic grader may take a few minutes to respond with feedback. If you hit "Check" 
	multiple times, you will lose a check for every press of the button.</p>
          <p>** If you're unfamiliar with how our autograder works, first try out one of the infinite check problems in the lecture sequences.</p>
          <p>** Please be judicious with your checks, as we are unable to give you more than 30 checks. However 
	this should be more than sufficient: if you do your code development in your local environment, and ensure you
	can pass our test cases, you should not require more than a few checks once you paste your working,
	tested code into our code box.</p>
        </section>
      </div>
      <div class="collapsible">
        <header>
          <a href="#" id="ht1">If you believe you have correct code but it is marked incorrect after clicking "Check"...</a>
        </header>
        <section id="ht1">
          <p>** After you submit your code, you can see every test case the graders runs on your code. They compare what your code outputs with what our answer code is supposed to output. Click the small link titled "See Full Output" below the Test Results header.</p>
        </section>
      </div>
      <div class="collapsible">
        <header>
          <a href="#" id="ht1">"Staff Debug: L397 Error" means your code has an infinite loop...</a>
        </header>
        <section id="ht1">
          <p>** Clicking Check may give you the error:<br/>
            <code>There was a problem running your solution (Staff debug: L379).</code> <code>We couldn't run your solution (Staff debug: L397).</code>. <br/>This means your code is taking too long or has an infinite loop. Test your code with more unique test cases, such as very large or very small values.
</p>
        </section>
      </div>
      <div class="collapsible">
        <header>
          <a href="#" id="ht1">Do not define your own values</a>
        </header>
        <section id="ht1">
          <p>** For problems such as these, do not include <code>input</code> statements or define variables we told you would be given. Our automated testing will provide values for you - so write your code in the following box assuming those variables are already defined.</p>
        </section>
      </div>
    </section>
  </text>
</problem>
