
  

    

      
ESTIMATED TIME TO COMPLETE: 18 minutes
This problem will ask a series of questions about generators.

      

        
Thinking about the 
genPrimes

          

            

              

                

                  
Return 1000000 prime numbers

                

                  
Print every 10th prime number, until you've printed 20 of them

                

                  
Keep printing the prime number until the user stops the program

                

                  
Everything that can be done with generator can be done with a function

          

            

              

                
Explanation:
We could write a function that does any of the choices. However a generator is nice because we can
		ask the generator for the next item, one at a time, and we don't waste time computing values that we
		don't ultimately want (or won't want for a long time).
Here are some examples of how one might code a function for each of the above options without a generator:
def genPrimesFn():
    '''Function to return 1000000 prime numbers'''
    primes = []   # primes generated so far
    last = 1      # last number tried
    while len(primes) < 1000000:
        last += 1
        for p in primes:
            if last % p == 0:
                break
        else:
            primes.append(last)
    return primes

def genPrimesFn():
    '''Function to print every 10th prime 
    number, until you've printed 20 of them.'''
    primes = []   # primes generated so far
    last = 1      # last number tried
    counter = 1
    while True:
        last += 1
        for p in primes:
            if last % p == 0:
                break
        else:
            primes.append(last)
            counter += 1
            if counter % 10 == 0:
                # Print every 10th prime
                print(last)
            if counter % (20*10) == 0:
                # Quit when we've printed the 10th prime 20 times (ie we've
                # printed the 200th prime)
                return



def genPrimesFn():
    '''Function to keep printing the prime number until the user stops the program.
    This way uses user input; you can also just run an infinite loop (while True)
    that the user can quit out of by hitting control-c'''
    primes = []   # primes generated so far
    last = 1      # last number tried
    uinp = 'y'    # Assume we want to at least print the first prime...
    while uinp != 'n':
        last += 1
        for p in primes:
            if last % p == 0:
                break
        else:
            primes.append(last)
            print(last)
            uinp = input("Print the next prime? [y/n] ")
            while uinp != 'y' and uinp != 'n':
                print("Sorry, I did not understand your input. Please enter 'y' for yes, or 'n' for no.")
                uinp = input("Print the next prime? [y/n] ")


        
Every procedure that has a 
yield

          

            

              

                

                  
True

                

                  
False

          

            

              

                
Explanation:
See 
https://docs.python.org/3/reference/expressions.html?highlight=yield

        
If a procedure has only one 
yield

          

            

              

                

                  
True

                

                  
False

          

            

              

                
Explanation:
Examine the following code; play around with it in Python.
def generator1():
    if True:
        yield 1 

def generator2():
    if False:   
        yield 1

g1 = generator1()
g2 = generator2()

print(type(g1))
print(type(g2))
print(next(gen))
print(next(gen))

        
If we were to use a generator to iterate over a million numbers,
	  how many numbers do we need to store in memory at once? 

          

            

              

                

                  
1

                

                  
2

                

                  
1000

                

                  
1000000

                

                  
Don't need to store anything in memory

          

            

              

                
Explanation:
We need to store 2 numbers - one for the current value, and one for the max value.
def genOneMillion():
    maxNum = 1000000
    current = -1
    while current < maxNum:
        current += 1
        yield current
Python actually provides this! The 
range
For the following tasks, would it be best to use a generator, a standard function, or either?

      

        
Finding the nth Fibonacci number 

          

            

              

                

                  
Generator

                

                  
Standard function

                

                  
Either a generator or standard function is fine

        
Printing out an unbounded sequence of Fibonacci numbers 

          

            

              

                

                  
Generator

                

                  
Standard function

                

                  
Either a generator or standard function is fine

        
Printing out a bounded sequence of prime numbers, where the prime numbers
	  are successively computed by division by smaller primes

          

            

              

                

                  
Generator

                

                  
Standard function

                

                  
Either a generator or standard function is fine

        
Printing out an unbounded sequence of prime numbers, where the prime numbers
	  are successively computed by division by smaller primes

          

            

              

                

                  
Generator

                

                  
Standard function

                

                  
Either a generator or standard function is fine

        
Finding the score of a word from the 6.00x Word Game of Pset 4 

          

            

              

                

                  
Generator

                

                  
Standard function

                

                  
Either a generator or standard function is fine

        
Iterating over a sequence of numbers in a random order, where no number
	  is repeated

          

            

              

                

                  
Generator

                

                  
Standard function

                

                  
Either a generator or standard function is fine
