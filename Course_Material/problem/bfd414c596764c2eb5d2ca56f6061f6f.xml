<problem display_name="Exercise: odd tuples" group_access="{&quot;51&quot;: [1, 2]}" markdown="null" weight="5.0">
  <text>
    <p>
      <b>ESTIMATED TIME TO COMPLETE: 5 minutes</b>
    </p>
    <p>Write a procedure called <code>oddTuples</code>, which takes a tuple as input, 
      and returns a new tuple as output, where every other element of the input tuple 
      is copied, starting with the first one. So if test is the tuple 
      <code>('I', 'am', 'a', 'test', 'tuple')</code>, then evaluating 
      <code>oddTuples</code> on this input would return the tuple 
      <code>('I', 'a', 'tuple')</code>. </p>
  </text>
  <coderesponse queuename="Watcher-MITx-6.00x">
    <textbox rows="30" cols="80" mode="python" tabsize="4"/>
    <codeparam>
      <initial_display>
def oddTuples(aTup):
    '''
    aTup: a tuple
    
    returns: tuple, every other element of aTup. 
    '''
    # Your Code Here
</initial_display>
      <answer_display>
def oddTuples(aTup):
    '''
    aTup: a tuple
    
    returns: tuple, every other element of aTup. 
    '''
    # a placeholder to gather our response
    rTup = ()
    index = 0

    # Idea: Iterate over the elements in aTup, counting by 2
    #  (every other element) and adding that element to 
    #  the result
    while index &lt; len(aTup):
        rTup += (aTup[index],)
        index += 2

    return rTup

def oddTuples2(aTup):
    '''
    Another way to solve the problem.
 
    aTup: a tuple
     
    returns: tuple, every other element of aTup. 
    '''
    # Here is another solution to the problem that uses tuple 
    #  slicing by 2 to achieve the same result
    return aTup[::2]
</answer_display>
      <grader_payload>
{"grader": "finger_exercises/L6/oddTuples/grade_oddTuples.py"}
</grader_payload>
    </codeparam>
  </coderesponse>
</problem>
